<!doctype html>
<html lang="sv">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Väderkamera - automatisk uppdatering</title>
    <style>
        :root{
            --bg:#0f1724;
            --card:#0b1a2b;
            --muted:#94a3b8;
            --accent:#00a3ff;
            --accent-2:#7be495;
            --text:#e6eef6;
            --glass: rgba(255,255,255,0.03);
        }
        body { font-family: Inter, Roboto, Arial, Helvetica, sans-serif; margin: 1rem; background: linear-gradient(180deg,#071028 0%, #081730 100%); color:var(--text); -webkit-font-smoothing:antialiased; }
        .container { max-width:980px; margin:0 auto; }
        header { margin-bottom:1rem; display:flex; align-items:baseline; gap:1rem }
        h1 { font-size:1.25rem; margin:0; color:var(--accent-2) }
        p small { color:var(--muted) }
        #camBox { background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); padding:0.75rem; border-radius:10px; border:1px solid rgba(255,255,255,0.03); display:flex; flex-direction:column; gap:0.75rem; }
        #viewer { background:var(--glass); padding:0.5rem; border-radius:8px; display:flex; flex-direction:column; align-items:center; gap:0.5rem; }
        img { max-width:100%; height:auto; display:block; background:#000; border-radius:6px; box-shadow:0 6px 20px rgba(2,6,23,0.6) }
        .controls { display:flex; gap:0.5rem; flex-wrap:wrap; align-items:center; }
        input[type="text"]{ width:360px; padding:0.45rem; border:1px solid rgba(255,255,255,0.06); border-radius:8px; background:transparent; color:var(--text) }
        input#interval{ width:70px }
        button { padding:0.45rem 0.8rem; border:0; background:linear-gradient(180deg,var(--accent),#0087d1); color:#01232b; font-weight:600; border-radius:8px; cursor:pointer; box-shadow:0 6px 18px rgba(0,163,255,0.12) }
        button.secondary { background:linear-gradient(180deg,#333846,#1f2937); color:var(--text); box-shadow:none }
        small { color:var(--muted) }
        iframe { width:100%; height:600px; border-radius:8px; border:0; background:#fff; }
        #camInfo { width:100%; display:flex; gap:1rem; justify-content:space-between; flex-wrap:wrap; align-items:center; color:var(--muted); }
        .meta { display:flex; flex-direction:column; gap:0.15rem; }
        .meta strong { color:var(--text); font-size:0.95rem }
        a.source { color:var(--accent); text-decoration:none; font-weight:600 }
        @media (max-width:720px){
            input[type="text"]{ width:100%; }
            .controls{ flex-direction:column; align-items:stretch }
            #camInfo{ flex-direction:column; align-items:flex-start }
        }
    </style>
</head>
<body>
<div class="container">
    <header>
        <h1>Väderkamera — automatisk uppdatering</h1>
        <p><small>Sätt en direktbild-URL (jpg/png) eller en sida med kameran och tryck "Ladda".</small></p>
    </header>

    <div id="camBox">
        <div class="controls">
            <input id="imageUrl" type="text" placeholder="Direktbild-URL (ex: https://.../camera.jpg)" />
            <input id="pageUrl" type="text" placeholder="Sida med kameran (om ingen direktbild)" />
            <input id="interval" type="text" value="10" style="width:70px" /> 
            <button id="loadBtn">Ladda</button>
            <button id="pauseBtn" class="secondary">Pausa</button>
        </div>

        <div id="viewer">
            <!-- Bildvisning prioriteras före iframe -->
            <img id="camImage" alt="Väderkamera-bild" style="display:none" />
            <iframe id="camIframe" style="display:none"></iframe>
            <div id="camInfo" aria-live="polite">
                <div class="meta">
                    <strong id="camTitle">Ingen kamera</strong>
                    <small id="camLocation"></small>
                </div>
                <div class="meta" style="text-align:right">
                    <small>Senaste</small>
                    <strong id="camUpdated">-</strong>
                </div>
                <div class="meta">
                    <small>Temperatur</small>
                    <strong id="camTemp">-</strong>
                    <small>Vind</small>
                    <strong id="camWind">-</strong>
               </div>
                <div class="meta" style="min-width:120px">
                    <small>Källa</small>
                    <a id="camSource" class="source" href="#" target="_blank" rel="noopener noreferrer">-</a>
                </div>
            </div>
            <p id="status"><small>Ingen kamera laddad.</small></p>
        </div>
    </div>
</div>

<script>
(function(){
    const defaultImage = '';
    const imageEl = document.getElementById('camImage');
    const iframeEl = document.getElementById('camIframe');
    const statusEl = document.getElementById('status');
    const imageInput = document.getElementById('imageUrl');
    const pageInput = document.getElementById('pageUrl');
    const intervalInput = document.getElementById('interval');
    const loadBtn = document.getElementById('loadBtn');
    const pauseBtn = document.getElementById('pauseBtn');

    const camTitle = document.getElementById('camTitle');
    const camLocation = document.getElementById('camLocation');
    const camUpdated = document.getElementById('camUpdated');
    const camSource = document.getElementById('camSource');
    const camTemp = document.getElementById('camTemp');
    const camWind = document.getElementById('camWind');

    let timer = null;
    let paused = false;
    let currentMode = null; // "image" eller "page"
    let currentUrl = '';
    let currentSourcePage = '';

    function setStatus(t){ statusEl.innerHTML = '<small>' + t + '</small>'; }

    function cacheBusted(url){
        const sep = url.indexOf('?') === -1 ? '?' : '&';
        return url + sep + '_cb=' + Date.now();
    }

    function startAutoRefresh(){
        stopAutoRefresh();
        const seconds = Math.max(1, parseInt(intervalInput.value || '10', 10));
        timer = setInterval(() => { if(!paused) refresh(); }, seconds * 1000);
    }
    function stopAutoRefresh(){
        if(timer){ clearInterval(timer); timer = null; }
    }

    function refresh(){
        if(currentMode === 'image'){
            imageEl.src = cacheBusted(currentUrl);
            setStatus('Uppdaterar bild...');
        } else if(currentMode === 'page'){
            iframeEl.src = currentUrl;
            setStatus('Uppdaterar sida...');
        }
    }

    function isDirectImageUrl(url){
        return /\.(jpe?g|png|gif|bmp|webp)(\?.*)?$/i.test(url);
    }

    function extractWeather(text){
        if(!text) return {};
        // Temperatur: leta efter tal + °C eller ord med temperatur
        let temp = '';
        const t1 = text.match(/([+-]?\d{1,2}(?:[.,]\d)?)\s*(?:°\s*[Cc]|\u00B0C|\s?C\b)/i);
        if(t1 && t1[1]) temp = t1[1].replace(',', '.') + ' °C';
        if(!temp){
            const t2 = text.match(/(?:Lämpötila|Temperatur|Temperature|Temp|T)[:\s]*([+-]?\d{1,2}(?:[.,]\d)?)/i);
            if(t2 && t2[1]) temp = t2[1].replace(',', '.') + ' °C';
        }

        // Vind: leta efter hastighet + enhet eller ord 'Vind'/'Tuuli'
        let wind = '';
        const w1 = text.match(/([0-9]{1,3}(?:[.,][0-9])?)\s*(km\/h|kmh|m\/s|mps|m\/s)/i);
        if(w1) wind = w1[1].replace(',', '.') + ' ' + w1[2];
        if(!wind){
            const w2 = text.match(/(?:Vind|Tuuli|Wind)[:\s]*([0-9]{1,3}(?:[.,][0-9])?)\s*(km\/h|kmh|m\/s|mps|m\/s)?/i);
            if(w2) wind = (w2[1].replace(',', '.') + (w2[2] ? ' ' + w2[2] : ' m/s'));
        }

        // Vindriktning
        const dir = text.match(/\b(N|S|E|W|NW|NE|SW|SE|Nord|Syd|Väst|Öst)\b/i);
        if(dir && wind) wind += ' ' + dir[0];

        return { temp: temp || '', wind: wind || '' };
    }

    // Hämtar sidan via allorigins och extraherar bild + metadata (titel, plats, tid)
    async function fetchImageAndMeta(pageUrl){
        setStatus('Hämtar sida och söker bild och metadata...');
        const proxy = 'https://api.allorigins.win/raw?url=' + encodeURIComponent(pageUrl);
        const res = await fetch(proxy);
        if(!res.ok) throw new Error('Kan inte hämta sidan via proxy');
        const html = await res.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        // Hitta bildkandidat - prioritera stora kamerabilder
        const imgs = Array.from(doc.images || []);
        let candidate = null;
        // försök hitta bild med kamera-relaterad sökväg eller tydlig kameraklass
        candidate = imgs.find(img => /(kamera|kamera|kamera|cam|camera|kamerat|kamerat)/i.test(img.src || ''));
        if(!candidate){
            // annars välj den bild som troligen är största (längsta path eller innehåller 'jpg')
            candidate = imgs.find(img => /\.(jpe?g|png|webp)$/i.test(img.src || '')) || imgs[0];
        }
        if(!candidate){
            // leta efter elementer som background-image i inline styles
            const bg = doc.querySelector('[style*="background-image"]');
            if(bg){
                const m = bg.getAttribute('style').match(/url\(["']?(.*?)["']?\)/);
                if(m && m[1]) candidate = { src: m[1] };
            }
        }

        if(!candidate){
            throw new Error('Ingen bild hittades på sidan');
        }

        const found = new URL(candidate.src, pageUrl).href;

        // Metadata: title
        const ogTitle = doc.querySelector('meta[property="og:title"], meta[name="twitter:title"]')?.getAttribute('content') || '';
        const docTitle = doc.querySelector('title')?.textContent || '';
        const firstHeading = (doc.querySelector('h1,h2,h3') && doc.querySelector('h1,h2,h3').textContent) || '';
        const title = (ogTitle || firstHeading || docTitle || 'Väderkamera').trim();

        // Metadata: location / kort beskrivning - försök hitta text nära bilden
        let location = '';
        try{
            const imgElement = Array.from(doc.images).find(i => (new URL(i.src, pageUrl).href) === found);
            if(imgElement){
                let el = imgElement.parentElement;
                for(let i=0;i<6 && el;i++){
                    const h = el.querySelector('h1,h2,h3, .title, .kamera-title, .kamera-heading');
                    if(h && h.textContent.trim()){ location = h.textContent.trim(); break; }
                    el = el.parentElement;
                }
            }
        }catch(e){ /* ignore */ }
        if(!location){
            const matches = pageUrl.match(/\/([^\/]+)\/?$/);
            location = matches ? decodeURIComponent(matches[1]).replace(/[-_]/g,' ') : '';
        }

        // Metadata: timestamp - leta efter tid/datum i texten
        const bodyText = doc.body ? doc.body.innerText.replace(/\s+/g,' ') : '';
        let timeMatch = bodyText.match(/(Uppdaterad[:\s]*\d{1,2}[:.]\d{2}(?:\s*\d{1,2}[\/.-]\d{1,2}[\/.-]\d{2,4})?)|(\d{1,2}[:.]\d{2}\s*(?:AM|PM)?)|(\d{1,2}[:.]\d{2})|(\d{1,1}[\/.-]\d{1,1}[\/.-]\d{2,4})/i);
        const timestamp = (timeMatch && timeMatch[0]) ? timeMatch[0] : '';

        // Extrahera väderdata (temperatur, vind)
        const weather = extractWeather(bodyText + ' ' + (ogTitle || '') + ' ' + (firstHeading || ''));

        // Returnera proxied bild + metadata
        return {
            imageUrl: makeProxiedUrl(found),
            sourceImageUrl: found,
            title: title,
            location: location,
            updated: timestamp,
            temp: weather.temp || '',
            wind: weather.wind || '',
            sourcePage: pageUrl
        };
    }

    function makeProxiedUrl(origUrl){
        try{
            const u = new URL(origUrl);
            const hostAndPath = u.hostname + u.pathname + (u.search || '');
            return 'https://images.weserv.nl/?url=' + encodeURIComponent(hostAndPath);
        }catch(e){
            throw new Error('Ogiltig bild-URL');
        }
    }

    function showMeta(meta){
        camTitle.textContent = meta.title || 'Väderkamera';
        camLocation.textContent = meta.location || '';
        camUpdated.textContent = meta.updated || new Date().toLocaleString();
        camSource.textContent = (meta.sourcePage || meta.sourceImageUrl) || '-';
        camSource.href = meta.sourcePage || meta.sourceImageUrl || '#';
        camSource.target = '_blank';
        if(typeof camTemp !== 'undefined') camTemp.textContent = meta.temp || '-';
        if(typeof camWind !== 'undefined') camWind.textContent = meta.wind || '-';
    }

    loadBtn.addEventListener('click', async () => {
        paused = false;
        const imgInput = (imageInput.value || defaultImage || '').trim();
        const page = (pageInput.value || '').trim();

        if(imgInput){
            if(isDirectImageUrl(imgInput)){
                currentMode = 'image';
                currentUrl = imgInput;
                currentSourcePage = '';
                iframeEl.style.display = 'none';
                imageEl.style.display = 'block';
                imageEl.onerror = () => setStatus('Fel: kunde inte ladda bilden. Kontrollera URL eller CORS.');
                imageEl.onload = () => setStatus('Senaste bild uppdaterad: ' + new Date().toLocaleTimeString());
                showMeta({ title:'Direktbild', location:'', updated:new Date().toLocaleTimeString(), sourceImageUrl:imgInput, temp:'-', wind:'-' });
                refresh();
                startAutoRefresh();
                return;
            }

            try{
                const meta = await fetchImageAndMeta(imgInput);
                currentMode = 'image';
                currentUrl = meta.imageUrl;
                currentSourcePage = meta.sourcePage || '';
                iframeEl.style.display = 'none';
                imageEl.style.display = 'block';
                imageEl.onerror = () => setStatus('Fel: kunde inte ladda proxad bild. Kontrollera URL.');
                imageEl.onload = () => setStatus('Senaste bild uppdaterad: ' + new Date().toLocaleTimeString());
                showMeta(meta);
                refresh();
                startAutoRefresh();
                return;
            }catch(err){
                console.error(err);
                setStatus('Kunde inte extrahera bild från sidan. Försöker visa sidan i iframe...');
                currentMode = 'page';
                currentUrl = imgInput;
                currentSourcePage = imgInput;
                imageEl.style.display = 'none';
                iframeEl.style.display = 'block';
                iframeEl.onload = () => setStatus('Sidan laddad: ' + new Date().toLocaleTimeString());
                iframeEl.onerror = () => setStatus('Fel: kunde inte ladda sidan. Kan blockeras av X-Frame-Options.');
                showMeta({ title:'Visar sida', location:'', updated:'-', sourcePage:imgInput, temp:'-', wind:'-' });
                refresh();
                startAutoRefresh();
                return;
            }
        }

        if(page){
            try{
                const meta = await fetchImageAndMeta(page);
                currentMode = 'image';
                currentUrl = meta.imageUrl;
                currentSourcePage = meta.sourcePage || '';
                iframeEl.style.display = 'none';
                imageEl.style.display = 'block';
                imageEl.onerror = () => setStatus('Fel: kunde inte ladda proxad bild. Kontrollera URL.');
                imageEl.onload = () => setStatus('Senaste bild uppdaterad: ' + new Date().toLocaleTimeString());
                showMeta(meta);
                refresh();
                startAutoRefresh();
                return;
            }catch(err){
                console.error(err);
                currentMode = 'page';
                currentUrl = page;
                currentSourcePage = page;
                imageEl.style.display = 'none';
                iframeEl.style.display = 'block';
                iframeEl.onload = () => setStatus('Sidan laddad: ' + new Date().toLocaleTimeString());
                iframeEl.onerror = () => setStatus('Fel: kunde inte ladda sidan. Kan blockeras av X-Frame-Options.');
                showMeta({ title:'Visar sida', location:'', updated:'-', sourcePage:page, temp:'-', wind:'-' });
                refresh();
                startAutoRefresh();
                return;
            }
        }

        setStatus('Ange en direkbild-URL eller en sida med kameran.');
    });

    pauseBtn.addEventListener('click', () => {
        paused = !paused;
        pauseBtn.textContent = paused ? 'Återuppta' : 'Pausa';
        setStatus(paused ? 'Uppdatering pausad' : 'Uppdatering aktiv');
    });

    if(defaultImage){
        imageInput.value = defaultImage;
        loadBtn.click();
    }
})();
</script>
</body>
</html> 

<!doctype html>
<html lang="sv">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Väderkamera - automatisk uppdatering</title>
    <style>
        :root{
            --bg:#0f1724;
            --card:#0b1a2b;
            --muted:#94a3b8;
            --accent:#00a3ff;
            --accent-2:#7be495;
            --text:#e6eef6;
            --glass: rgba(255,255,255,0.03);
            --sidebar:#071026;
        }
        html,body{ height:100%; }
        body { font-family: Inter, Roboto, Arial, Helvetica, sans-serif; margin: 0; background: linear-gradient(180deg,#071028 0%, #081730 100%); color:var(--text); -webkit-font-smoothing:antialiased; }
        .wrap { display:flex; min-height:100vh; gap:1rem; padding:1rem; box-sizing:border-box; }
        /* SIDEBAR */
        aside#sidebar { width:260px; background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); border-radius:12px; padding:1rem; border:1px solid rgba(255,255,255,0.03); color:var(--muted); display:flex; flex-direction:column; gap:0.75rem; transition: transform .28s ease; transform: translateX(0); }
        aside#sidebar.hidden { transform: translateX(-120%); pointer-events:none; opacity:0.02; }
        .logo { display:flex; align-items:center; gap:0.6rem; }
        .logo .dot { width:10px; height:10px; border-radius:50%; background:var(--accent-2); box-shadow:0 6px 18px rgba(123,228,149,0.08) }
        .logo h2 { margin:0; font-size:0.95rem; color:var(--accent-2) }
        .nav { display:flex; flex-direction:column; gap:0.4rem; margin-top:0.25rem }
        .nav a { color:var(--text); text-decoration:none; padding:0.4rem; border-radius:8px; font-size:0.9rem }
        .nav a:hover { background:rgba(255,255,255,0.02) }
        .small { font-size:0.85rem; color:var(--muted) }

        /* MAIN */
        .container { flex:1; max-width:980px; margin:0 auto; }
        header { margin-bottom:1rem; display:flex; align-items:center; justify-content:space-between; gap:1rem }
        .controls-row { display:flex; gap:0.5rem; align-items:center; flex-wrap:wrap; }
        h1 { font-size:1.25rem; margin:0; color:var(--accent-2) }
        p small { color:var(--muted) }
        #camBox { background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); padding:0.75rem; border-radius:10px; border:1px solid rgba(255,255,255,0.03); display:flex; flex-direction:column; gap:0.75rem; }
        #viewer { background:var(--glass); padding:0.5rem; border-radius:8px; display:flex; flex-direction:column; align-items:stretch; gap:0.5rem; }

        img { width:100%; height:auto; display:block; background:#000; border-radius:6px; box-shadow:0 6px 20px rgba(2,6,23,0.6) }
        .controls { display:flex; gap:0.5rem; flex-wrap:wrap; align-items:center; }
        input[type="text"]{ width:360px; padding:0.45rem; border:1px solid rgba(255,255,255,0.06); border-radius:8px; background:transparent; color:var(--text); }
        input#interval{ width:70px }
        button { padding:0.45rem 0.8rem; border:0; background:linear-gradient(180deg,var(--accent),#0087d1); color:#01232b; font-weight:600; border-radius:8px; cursor:pointer; box-shadow:0 6px 18px rgba(0,163,255,0.12) }
        button.secondary { background:linear-gradient(180deg,#333846,#1f2937); color:var(--text); box-shadow:none }
        small { color:var(--muted) }
        iframe { width:100%; height:600px; border-radius:8px; border:0; background:#fff; }

        #camInfo { width:100%; display:flex; gap:1rem; justify-content:space-between; flex-wrap:wrap; align-items:center; color:var(--muted); padding:0.45rem; }
        .meta { display:flex; flex-direction:column; gap:0.15rem; }
        .meta strong { color:var(--text); font-size:0.95rem }
        a.source { color:var(--accent); text-decoration:none; font-weight:600 }

        /* details grid under image */
        .details { display:grid; grid-template-columns: repeat(4, 1fr); gap:0.6rem; margin-top:0.5rem; }
        .detail { background: rgba(255,255,255,0.018); padding:0.6rem; border-radius:8px; border:1px solid rgba(255,255,255,0.02); display:flex; flex-direction:column; gap:0.25rem; }
        .detail .k { font-size:0.78rem; color:var(--muted); }
        .detail .v { font-weight:700; color:var(--text); font-size:0.95rem; }

        /* hamburger */
        .hambtn { background:transparent; border:0; color:var(--text); cursor:pointer; padding:0.35rem; border-radius:8px; display:inline-flex; align-items:center; gap:0.5rem; }
        .hambtn .bars { width:20px; height:14px; display:inline-block; position:relative; }
        .bars span { position:absolute; left:0; right:0; height:2px; background:var(--text); border-radius:2px; transition: transform .22s ease, top .22s ease, opacity .22s ease; }
        .bars span:nth-child(1){ top:0; }
        .bars span:nth-child(2){ top=6px; }
        .bars span:nth-child(3){ top=12px; }
        .hambtn.active .bars span:nth-child(1){ top=6px; transform=rotate(45deg); }
        .hambtn.active .bars span:nth-child(2){ opacity=0; }
        .hambtn.active .bars span:nth-child(3){ top=6px; transform=rotate(-45deg); }

        @media (max-width:920px){
            aside#sidebar{ position:fixed; left:1rem; top:1rem; z-index:40; }
            .wrap{ padding-top:1rem; }
            .details { grid-template-columns: repeat(2, 1fr); }
            input[type="text"]{ width:100%; }
        }
        @media (max-width:640px){
            .wrap{ flex-direction:column; padding:0.75rem; }
            aside#sidebar{ width:100%; transform:translateX(-120%); }
            aside#sidebar.visible{ transform:translateX(0); }
            .details { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
<div class="wrap">
    <aside id="sidebar" class="hidden" aria-hidden="true">
        <div class="logo">
            <div class="dot"></div>
            <h2>Väderkameror</h2>
        </div>
        <p class="small">Klistra in en kelikamerat-lista eller en kamerasida och tryck Ladda. Sidan försöker extrahera bild och väderdata.</p>

        <nav class="nav">
            <a href="#" id="example1">Sipoo — st148_Sipoo_K</a>
            <a href="#" id="example2">Uusimaa — lista</a>
            <a href="#" id="help">Instruktioner</a>
            <a href="#" id="fintraffic">Fintraffic — C01658 (station 1117)</a>
        </nav>

        <div style="margin-top:auto; font-size:0.85rem; color:var(--muted)">
            <div><strong style="color:var(--text)">Uppdatering</strong></div>
            <div id="sidebarStatus" class="small">Inaktiv</div>
        </div>
    </aside>

    <main class="container" role="main">
        <header>
            <div style="display:flex; align-items:center; gap:0.75rem;">
                <button class="hambtn" id="hambtn" aria-label="Meny">
                    <span class="bars"><span></span><span></span><span></span></span>
                </button>
                <div>
                    <h1>Väderkamera — automatisk uppdatering</h1>
                    <p><small>Sätt en direktbild-URL eller en sida med kameran och tryck "Ladda".</small></p>
                </div>
            </div>

            <div class="controls-row">
                <div style="display:flex; gap:0.5rem; align-items:center;">
                    <input id="imageUrl" type="text" placeholder="Direktbild-URL (ex: https://.../camera.jpg)" />
                    <input id="pageUrl" type="text" placeholder="Sida med kameran (om ingen direktbild)" />
                    <input id="interval" type="text" value="10" style="width:70px" />
                    <button id="loadBtn">Ladda</button>
                    <button id="pauseBtn" class="secondary">Pausa</button>
                </div>
            </div>
        </header>

        <div id="camBox">
            <div id="viewer">
                <img id="camImage" alt="Väderkamera-bild" style="display:none" />
                <iframe id="camIframe" style="display:none"></iframe>

                <div id="camInfo" aria-live="polite">
                    <div class="meta">
                        <strong id="camTitle">Ingen kamera</strong>
                        <small id="camLocation"></small>
                    </div>
                    <div class="meta" style="text-align:right">
                        <small>Senaste</small>
                        <strong id="camUpdated">-</strong>
                    </div>
                    <div class="meta" style="min-width:120px">
                        <small>Källa</small>
                        <a id="camSource" class="source" href="#" target="_blank" rel="noopener noreferrer">-</a>
                    </div>
                </div>

                <!-- detaljer under bilden -->
                <div class="details" id="detailsGrid" style="display:none">
                    <div class="detail">
                        <div class="k">Temperatur</div>
                        <div class="v" id="camTemp">-</div>
                    </div>
                    <div class="detail">
                        <div class="k">Vind</div>
                        <div class="v" id="camWind">-</div>
                    </div>
                    <div class="detail">
                        <div class="k">Vindriktning</div>
                        <div class="v" id="camWindDir">-</div>
                    </div>
                    <div class="detail">
                        <div class="k">Luftfuktighet</div>
                        <div class="v" id="camHumidity">-</div>
                    </div>
                    <div class="detail">
                        <div class="k">Lufttryck</div>
                        <div class="v" id="camPressure">-</div>
                    </div>
                    <div class="detail">
                        <div class="k">Sikt</div>
                        <div class="v" id="camVisibility">-</div>
                    </div>
                    <div class="detail">
                        <div class="k">Nederbörd</div>
                        <div class="v" id="camPrecip">-</div>
                    </div>
                    <div class="detail">
                        <div class="k">Väder</div>
                        <div class="v" id="camCondition">-</div>
                    </div>
                </div>

                <p id="status"><small>Ingen kamera laddad.</small></p>
            </div>
        </div>
    </main>
</div>

<script>
(function(){
    const defaultImage = '';
    const imageEl = document.getElementById('camImage');
    const iframeEl = document.getElementById('camIframe');
    const statusEl = document.getElementById('status');
    const imageInput = document.getElementById('imageUrl');
    const pageInput = document.getElementById('pageUrl');
    const intervalInput = document.getElementById('interval');
    const loadBtn = document.getElementById('loadBtn');
    const pauseBtn = document.getElementById('pauseBtn');

    const camTitle = document.getElementById('camTitle');
    const camLocation = document.getElementById('camLocation');
    const camUpdated = document.getElementById('camUpdated');
    const camSource = document.getElementById('camSource');
    const camTemp = document.getElementById('camTemp');
    const camWind = document.getElementById('camWind');
    const camWindDir = document.getElementById('camWindDir');
    const camHumidity = document.getElementById('camHumidity');
    const camPressure = document.getElementById('camPressure');
    const camVisibility = document.getElementById('camVisibility');
    const camPrecip = document.getElementById('camPrecip');
    const camCondition = document.getElementById('camCondition');
    const detailsGrid = document.getElementById('detailsGrid');

    const sidebar = document.getElementById('sidebar');
    const hambtn = document.getElementById('hambtn');
    const sidebarStatus = document.getElementById('sidebarStatus');

    let timer = null;
    let paused = false;
    let currentMode = null; // "image" eller "page"
    let currentUrl = '';
    let currentSourcePage = '';

    function setStatus(t){ statusEl.innerHTML = '<small>' + t + '</small>'; if(sidebarStatus) sidebarStatus.textContent = t; }

    function cacheBusted(url){
        const sep = url.indexOf('?') === -1 ? '?' : '&';
        return url + sep + '_cb=' + Date.now();
    }

    function startAutoRefresh(){
        stopAutoRefresh();
        const seconds = Math.max(1, parseInt(intervalInput.value || '10', 10));
        timer = setInterval(() => { if(!paused) refresh(); }, seconds * 1000);
        setStatus('Autouppdatering var ' + seconds + 's');
    }
    function stopAutoRefresh(){
        if(timer){ clearInterval(timer); timer = null; setStatus('Autouppdatering stoppad'); }
    }

    function refresh(){
        if(currentMode === 'image'){
            imageEl.src = cacheBusted(currentUrl);
            setStatus('Uppdaterar bild...');
        } else if(currentMode === 'page'){
            iframeEl.src = currentUrl;
            setStatus('Uppdaterar sida...');
        }
    }

    function isDirectImageUrl(url){
        return /\.(jpe?g|png|gif|bmp|webp)(\?.*)?$/i.test(url);
    }

    function extractWeather(text){
        if(!text) return {};
        const out = {};
        text = (''+text).replace(/\u00A0/g,' ').replace(/\s+/g,' ').trim();

        const t1 = text.match(/([+-]?\d{1,2}(?:[.,]\d+)?)\s*(?:°\s*[Cc]|\u00B0C|\s?C\b|Celsius)/i)
                || text.match(/(?:Lämpötila|Temperatur|Temperature|Temp|T)[:\s]*([+-]?\d{1,2}(?:[.,]\d+)?)/i);
        if(t1 && t1[1]) out.temp = t1[1].replace(',', '.') + ' °C';

        const w1 = text.match(/([0-9]{1,3}(?:[.,][0-9]+)?)\s*(km\/h|kmh|kph|m\/s|mps)/i)
                || text.match(/(?:Vind|Tuuli|Wind)[:\s]*([0-9]{1,3}(?:[.,][0-9]+)?)\s*(km\/h|kmh|kph|m\/s|mps)?/i);
        if(w1) out.wind = (w1[1].replace(',', '.')) + (w1[2] ? ' ' + w1[2] : ' m/s');

        const dir = text.match(/\b(N|S|E|W|NW|NE|SW|SE|Nord|Syd|Väst|Öst|north|south|east|west)\b/i);
        if(dir) out.windDir = dir[0];

        const hum = text.match(/(?:Luftfuktighet|Relativ luftfuktighet|Humidity|RH)[:\s]*([0-9]{1,3})\s*%/i)
                 || text.match(/\b([0-9]{1,2})\s*%\b/);
        if(hum) out.humidity = (hum[1] || hum[0]) + ' %';

        const press = text.match(/([89|1]\d{2,3})\s*(hPa|hpa|mbar|mb)/i);
        if(press) out.pressure = press[1] + ' ' + (press[2] || 'hPa');

        const vis = text.match(/(\d{1,2}(?:[.,]\d+)?)\s*(km|kilometer|miles)/i);
        if(vis) out.visibility = vis[1].replace(',', '.') + ' ' + vis[2];

        const prec = text.match(/([0-9]{1,3}(?:[.,][0-9]+)?)\s*(mm|cm|mm\/h|mmh|l\/m2)/i);
        if(prec) out.precip = prec[1].replace(',', '.') + ' ' + prec[2];

        const cond = text.match(/\b(soligt|klart|mulet|moln|regn|snö|slask|dimma|dis|fog|clear|cloud|rain|snow|drizzle|overcast|sunny|cloudy|rainy|snowy)\b/i);
        if(cond) out.condition = cond[0];

        return out;
    }

    // Robust image-finding: images, picture/source, inline styles, script/json, plain URL regex
    function findImageInDoc(doc, baseUrl){
        // 1) images and sources
        const imgs = Array.from(doc.querySelectorAll('img')).map(i => i.getAttribute('src') || i.src).filter(Boolean);
        if(imgs.length){
            // prefer large images (longer path) or those containing 'picture'/'camera'/'trafficcams'
            imgs.sort((a,b)=> (/(camera|cam|picture|trafficcams|kelikamerat|jpg|jpeg)/i.test(b)?1:0) - (/(camera|cam|picture|trafficcams|kelikamerat|jpg|jpeg)/i.test(a)?1:0) || b.length - a.length);
            return new URL(imgs[0], baseUrl).href;
        }

        // 2) source elements (<source srcset>)
        const sources = Array.from(doc.querySelectorAll('source')).map(s=> s.getAttribute('src') || s.getAttribute('srcset')).filter(Boolean);
        if(sources.length) return new URL(sources[0].split(/\s+/)[0], baseUrl).href;

        // 3) inline background-image
        const bgEl = Array.from(doc.querySelectorAll('[style]')).find(el=> /background-image/i.test(el.getAttribute('style')||''));
        if(bgEl){
            const m = bgEl.getAttribute('style').match(/url\(["']?(.*?)["']?\)/);
            if(m && m[1]) return new URL(m[1], baseUrl).href;
        }

        // 4) search scripts and page text for direct image URLs
        const text = doc.documentElement.innerHTML;
        const urlRegex = /https?:\/\/[^"'<>\\\s]+?\.(?:jpg|jpeg|png|gif|webp)(?:\?[^"'<>\\\s]*)?/ig;
        const matches = text.match(urlRegex);
        if(matches && matches.length) return matches[0];

        // 5) relative image regex (path ending with image extension)
        const relRegex = /(?:src|href|file):\s*["']?([\/\w\-\._]+?\.(?:jpg|jpeg|png|gif|webp))(?:["'\s>])/ig;
        const relMatch = relRegex.exec(text);
        if(relMatch && relMatch[1]) return new URL(relMatch[1], baseUrl).href;

        return '';
    }

    // Try candidate URL exists (via proxy) and is an image
    async function testImageCandidate(candidate){
        try{
            const proxy = 'https://api.allorigins.win/raw?url=' + encodeURIComponent(candidate);
            const r = await fetch(proxy);
            if(!r.ok) return false;
            const ct = r.headers.get('content-type') || '';
            return ct.startsWith('image/');
        }catch(e){
            return false;
        }
    }

    // Special parsing for Fintraffic pages (cameraId/cameraPanId)
    async function tryFintraffic(u, doc){
        try{
            if(!u.hostname.includes('liikennetilanne.fintraffic.fi')) return null;
            // attempt to find image in DOM first
            const imgFound = findImageInDoc(doc, u.href);
            if(imgFound){
                const ok = await testImageCandidate(imgFound);
                if(ok) return imgFound;
            }
            // if not found, build patterns
            const cam = u.searchParams.get('cameraId');
            const pan = u.searchParams.get('cameraPanId');
            const candidates = [];
            if(cam && pan){
                candidates.push(`https://liikennetilanne.fintraffic.fi/trafficcams/cameras/${cam}/pans/${pan}/image`);
                candidates.push(`https://liikennetilanne.fintraffic.fi/trafficcams/cameras/${cam}/pans/${pan}/image.jpg`);
                candidates.push(`https://liikennetilanne.fintraffic.fi/kelikamerat/pictures/${cam}_${pan}.jpg`);
                candidates.push(`https://liikennetilanne.fintraffic.fi/kelikamerat/pictures/${cam}_${pan}.png`);
                candidates.push(`https://liikennetilanne.fintraffic.fi/image?cameraId=${cam}&cameraPanId=${pan}`);
            }
            // try candidates
            for(const c of candidates){
                if(await testImageCandidate(c)) return c;
            }
            // last resort: look for any URL in page that contains cam id
            if(cam){
                const regex = new RegExp(cam + '[^"\'\\s>]*?\\.(?:jpg|png|jpeg|webp)', 'i');
                const html = doc.documentElement.innerHTML;
                const m = html.match(regex);
                if(m && m[0]){
                    const url = m[0].startsWith('http') ? m[0] : new URL(m[0], u.href).href;
                    if(await testImageCandidate(url)) return url;
                }
            }
            return null;
        }catch(e){ return null; }
    }

    // Main fetch and extract
    async function fetchImageAndMeta(pageUrl){
        setStatus('Hämtar sida och söker bild och metadata...');
        const proxyFor = url => 'https://api.allorigins.win/raw?url=' + encodeURIComponent(url);

        let res = await fetch(proxyFor(pageUrl));
        if(!res.ok) throw new Error('Kan inte hämta sidan via proxy');
        let html = await res.text();
        const parser = new DOMParser();
        let doc = parser.parseFromString(html, 'text/html');

        // If kelikamerat list page -> follow first camera link
        try{
            const u0 = new URL(pageUrl);
            if(u0.hostname.includes('kelikamerat.info') && !u0.pathname.includes('/st')){
                setStatus('Söker kameror på kelikamerat-listan...');
                const anchors = Array.from(doc.querySelectorAll('a[href]'));
                const camLinkEl = anchors.find(a => /\/st\d+[\w\-_]*/i.test(a.getAttribute('href')||''));
                if(camLinkEl){
                    const camHref = new URL(camLinkEl.getAttribute('href'), pageUrl).href;
                    res = await fetch(proxyFor(camHref));
                    if(res.ok){
                        html = await res.text();
                        doc = parser.parseFromString(html, 'text/html');
                        pageUrl = camHref;
                    }
                }
            }
        }catch(e){ /* ignore */ }

        const u = new URL(pageUrl);

        // Fintraffic special handling
        const finImg = await tryFintraffic(u, doc);
        if(finImg){
            const meta = {
                imageUrl: makeProxiedUrl(finImg),
                sourceImageUrl: finImg,
                title: 'Fintraffic kamera ' + (u.searchParams.get('cameraId') || u.pathname.split('/').pop()),
                location: 'Station 1117',
                updated: '',
                temp: '',
                wind: '',
                windDir: '',
                humidity: '',
                pressure: '',
                visibility: '',
                precip: '',
                condition: '',
                sourcePage: pageUrl
            };
            return meta;
        }

        // Generic image find
        const found = findImageInDoc(doc, pageUrl);
        if(!found) throw new Error('Ingen bild hittades på sidan');

        // Try to collect metadata
        const ogTitle = doc.querySelector('meta[property="og:title"], meta[name="twitter:title"]')?.getAttribute('content') || '';
        const docTitle = doc.querySelector('title')?.textContent || '';
        const firstHeading = (doc.querySelector('h1,h2,h3') && doc.querySelector('h1,h2,h3').textContent) || '';
        const title = (ogTitle || firstHeading || docTitle || 'Väderkamera').trim();

        let location = '';
        try{
            const imgElement = Array.from(doc.images).find(i => {
                try { return (new URL(i.src, pageUrl).href) === found; } catch(e){ return false; }
            });
            if(imgElement){
                let el = imgElement.parentElement;
                for(let i=0;i<6 && el;i++){
                    const h = el.querySelector('h1,h2,h3, .title, .kamera-title, .kamera-heading');
                    if(h && h.textContent.trim()){ location = h.textContent.trim(); break; }
                    el = el.parentElement;
                }
            }
        }catch(e){ /* ignore */ }
        if(!location){
            const matches = pageUrl.match(/\/([^\/]+)\/?$/);
            location = matches ? decodeURIComponent(matches[1]).replace(/[-_]/g,' ') : '';
        }

        const bodyText = doc.body ? doc.body.innerText.replace(/\s+/g,' ') : '';
        let timeMatch = bodyText.match(/(Uppdaterad[:\s]*\d{1,2}[:.]\d{2}(?:\s*\d{1,2}[\/.-]\d{1,2}[\/.-]\d{2,4})?)|(\d{1,2}[:.]\d{2}\s*(?:AM|PM)?)|(\d{1,2}[:.]\d{2})|(\d{1,1}[\/.-]\d{1,1}[\/.-]\d{2,4})/i);
        const timestamp = (timeMatch && timeMatch[0]) ? timeMatch[0] : '';

        // Collect potential weather text from likely selectors and script/json
        const selectors = ['.camera-info', '.kamera-info', '.weather', '.obs', '.obs-container', '.observations', '.current-weather', '.kamera-info-box', '#camera-info', '.site-weather', '.meteo', '.weather-box', '.kamera-observation'];
        const pieces = [];
        selectors.forEach(sel=>{
            const el = doc.querySelectorAll(sel);
            if(el && el.length) el.forEach(e=> pieces.push(e.innerText.trim()));
        });
        // include nearby text around first heading and image
        pieces.push(firstHeading);
        pieces.push(bodyText.slice(0,2000));
        const weatherText = pieces.filter(Boolean).join(' ');
        const weather = extractWeather(weatherText);

        return {
            imageUrl: makeProxiedUrl(found),
            sourceImageUrl: found,
            title: title,
            location: location,
            updated: timestamp,
            temp: weather.temp || '',
            wind: weather.wind || '',
            windDir: weather.windDir || '',
            humidity: weather.humidity || '',
            pressure: weather.pressure || '',
            visibility: weather.visibility || '',
            precip: weather.precip || '',
            condition: weather.condition || '',
            sourcePage: pageUrl
        };
    }

    function showMeta(meta){
        camTitle.textContent = meta.title || 'Väderkamera';
        camLocation.textContent = meta.location || '';
        camUpdated.textContent = meta.updated || new Date().toLocaleString();
        camSource.textContent = (meta.sourcePage || meta.sourceImageUrl) || '-';
        camSource.href = meta.sourcePage || meta.sourceImageUrl || '#';
        camSource.target = '_blank';

        camTemp.textContent = meta.temp || '-';
        camWind.textContent = meta.wind || '-';
        camWindDir.textContent = meta.windDir || '-';
        camHumidity.textContent = meta.humidity || '-';
        camPressure.textContent = meta.pressure || '-';
        camVisibility.textContent = meta.visibility || '-';
        camPrecip.textContent = meta.precip || '-';
        camCondition.textContent = meta.condition || '-';

        if(meta.temp || meta.wind || meta.humidity || meta.pressure || meta.visibility || meta.precip || meta.condition){
            detailsGrid.style.display = 'grid';
        } else {
            detailsGrid.style.display = 'none';
        }
    }

    loadBtn.addEventListener('click', async () => {
        paused = false;
        const imgInput = (imageInput.value || defaultImage || '').trim();
        const page = (pageInput.value || '').trim();

        if(imgInput){
            if(isDirectImageUrl(imgInput)){
                currentMode = 'image';
                currentUrl = imgInput;
                currentSourcePage = '';
                iframeEl.style.display = 'none';
                imageEl.style.display = 'block';
                imageEl.onerror = () => setStatus('Fel: kunde inte ladda bilden. Kontrollera URL eller CORS.');
                imageEl.onload = () => setStatus('Senaste bild uppdaterad: ' + new Date().toLocaleTimeString());
                showMeta({ title:'Direktbild', location:'', updated:new Date().toLocaleTimeString(), sourceImageUrl:imgInput, temp:'-', wind:'-' });
                refresh();
                startAutoRefresh();
                return;
            }

            try{
                const meta = await fetchImageAndMeta(imgInput);
                currentMode = 'image';
                currentUrl = meta.imageUrl;
                currentSourcePage = meta.sourcePage || '';
                iframeEl.style.display = 'none';
                imageEl.style.display = 'block';
                imageEl.onerror = () => setStatus('Fel: kunde inte ladda proxad bild. Kontrollera URL.');
                imageEl.onload = () => setStatus('Senaste bild uppdaterad: ' + new Date().toLocaleTimeString());
                showMeta(meta);
                refresh();
                startAutoRefresh();
                return;
            }catch(err){
                console.error(err);
                setStatus('Kunde inte extrahera bild från sidan. Visar sidan i iframe som fallback...');
                currentMode = 'page';
                currentUrl = imgInput;
                currentSourcePage = imgInput;
                imageEl.style.display = 'none';
                iframeEl.style.display = 'block';
                iframeEl.onload = () => setStatus('Sidan laddad: ' + new Date().toLocaleTimeString());
                iframeEl.onerror = () => setStatus('Fel: kunde inte ladda sidan. Kan blockeras av X-Frame-Options.');
                showMeta({ title:'Visar sida', location:'', updated:'-', sourcePage:imgInput, temp:'-', wind:'-' });
                refresh();
                startAutoRefresh();
                return;
            }
        }

        if(page){
            try{
                const meta = await fetchImageAndMeta(page);
                currentMode = 'image';
                currentUrl = meta.imageUrl;
                currentSourcePage = meta.sourcePage || '';
                iframeEl.style.display = 'none';
                imageEl.style.display = 'block';
                imageEl.onerror = () => setStatus('Fel: kunde inte ladda proxad bild. Kontrollera URL.');
                imageEl.onload = () => setStatus('Senaste bild uppdaterad: ' + new Date().toLocaleTimeString());
                showMeta(meta);
                refresh();
                startAutoRefresh();
                return;
            }catch(err){
                console.error(err);
                currentMode = 'page';
                currentUrl = page;
                currentSourcePage = page;
                imageEl.style.display = 'none';
                iframeEl.style.display = 'block';
                iframeEl.onload = () => setStatus('Sidan laddad: ' + new Date().toLocaleTimeString());
                iframeEl.onerror = () => setStatus('Fel: kunde inte ladda sidan. Kan blockeras av X-Frame-Options.');
                showMeta({ title:'Visar sida', location:'', updated:'-', sourcePage:page, temp:'-', wind:'-' });
                refresh();
                startAutoRefresh();
                return;
            }
        }

        setStatus('Ange en direkbild-URL eller en sida med kameran.');
    });

    pauseBtn.addEventListener('click', () => {
        paused = !paused;
        pauseBtn.textContent = paused ? 'Återuppta' : 'Pausa';
        setStatus(paused ? 'Uppdatering pausad' : 'Uppdatering aktiv');
    });

    // hamburger toggle
    hambtn.addEventListener('click', () => {
        const isHidden = sidebar.classList.contains('hidden');
        sidebar.classList.toggle('hidden', !isHidden);
        hambtn.classList.toggle('active', isHidden);
        sidebar.setAttribute('aria-hidden', String(!isHidden));
    });

    // exempellänkar i sidomeny
    document.getElementById('example1').addEventListener('click', (e)=>{ e.preventDefault(); pageInput.value = 'https://www.kelikamerat.info/kelikamerat/Uusimaa/Sipoo/tie-148/st148_Sipoo_K'; loadBtn.click(); });
    document.getElementById('example2').addEventListener('click', (e)=>{ e.preventDefault(); pageInput.value = 'https://www.kelikamerat.info/kelikamerat/Uusimaa/Sipoo'; loadBtn.click(); });
    document.getElementById('fintraffic').addEventListener('click', (e)=>{ e.preventDefault(); pageInput.value = 'https://liikennetilanne.fintraffic.fi/kelikamerat/?cameraId=C01658&cameraPanId=C0165801&scrollPoint=picture'; loadBtn.click(); });
    document.getElementById('help').addEventListener('click', (e)=>{ e.preventDefault(); alert('Klistra in en sidlänk eller direktbild-URL och tryck Ladda. Intervallet är antal sekunder mellan uppdateringar.'); });

    if(defaultImage){
        imageInput.value = defaultImage;
        loadBtn.click();
    }
})();
</script>
</body>
</html>
